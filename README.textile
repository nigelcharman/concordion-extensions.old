h1. concordion-extensions

Contains 3 "Concordion":http://concordion.org extensions. These require Concordion 1.4.0 or later.

The extensions are packaged in the @concordion-extensions@ jar.  For example source code, download the @concordion-extension-demo@ zip file.

To install the default configuration of all 3 extensions, set the @concordion.extensions@ system property to @nz.co.twoten.concordion.Extensions@, or see the individual extensions for installation details. To install multiple or customised extensions, supply a comma-separated list of extensions or extension factories in the @concordion.extensions@ system property. 

The system property is typically set in the @BeforeClass of a base test case:

bc..    @BeforeClass
   public static void addExtensions() {
       System.setProperty("concordion.extensions", "nz.co.twoten.concordion.Extensions");
   }

p. 

h2. LoggingTooltipExtension

Annotates the Concordion HTML output with logging information captured using java.util.logging. See "my blog":http://tutansblog.blogspot.com/2010/09/whats-happening-in-my-acceptance-tests.html for details and screenshots.

h4. Default Configuration

By default, this extension will capture all output from the root logger and disable console logging of the root logger.

To install the extension:

bc..      System.setProperty("concordion.extensions", "nz.co.twoten.concordion.LoggingTooltipExtension");

p. 

h4. Custom Configuration

The extension can be customised using an @ConcordionExtensionFactory@ to call the custom constructor. The logging can be restricted to named loggers, and by logging levels. The output of logging to the console can also be enabled.

An example factory:

bc.. package carbon;

import java.util.logging.Level;
import nz.co.twoten.concordion.LoggingTooltipExtension;
import org.concordion.api.extension.ConcordionExtension;
import org.concordion.api.extension.ConcordionExtensionFactory;

public class LoggingTooltipExtensionFactory implements ConcordionExtensionFactory {
    @Override
    public ConcordionExtension createExtension() {
        String loggers = "carbon.CarbonCalculatorTest, selenium.events";
        return new LoggingTooltipExtension(loggers, Level.FINE, false);
    }
}

p. 
To install this example extension factory:

bc..      System.setProperty("concordion.extensions", "carbon.LoggingTooltipExtensionFactory");

p. 
Thanks to Trent Richardson for the "CSS Tooltip":http://trentrichardson.com/examples/csstooltips/ implementation.

h2. ScreenshotExtension

Adds screenshots to the Concordion output, typically when failures or exceptions occur. The screenshot is displayed when you hover over the relevant element. Clicking on the element will open the image in the current browser window. See "my blog":http://tutansblog.blogspot.com/2010/10/displaying-screenshots-on-acceptance.html for screenshots.

It can also be used as a command, to explicitly add screenshots to the output HTML. 

h4. Default Configuration

By default, this extension will add screenshots to the output whenever an assertion fails, or an uncaught Throwable occurs in the test. 

To install the extension:

bc..      System.setProperty("concordion.extensions", "nz.co.twoten.concordion.ScreenshotExtension");

p. 

h4. Custom Configuration

The extension can be customised using an @ConcordionExtensionFactory@ to create and modify the extension.  

An example factory:

bc.. package carbon;

import nz.co.twoten.concordion.ScreenshotExtension;
import nz.co.twoten.concordion.ScreenshotTaker;
import nz.co.twoten.selenium.logger.SeleniumScreenshotTaker;

import org.concordion.api.extension.ConcordionExtension;
import org.concordion.api.extension.ConcordionExtensionFactory;

public class ScreenshotExtensionFactory implements ConcordionExtensionFactory {

    private static ScreenshotExtension extension;
    private static ScreenshotTaker screenshotTaker = new SeleniumScreenshotTaker();

    @Override
    public ConcordionExtension createExtension() {
        extension = new ScreenshotExtension();
        extension.setScreenshotTaker(screenshotTaker);
        extension.setMaxWidth(400);
        return extension;
    }

    public static void setScreenshotOnAssertSuccess() {
        extension.setScreenshotOnAssertionSuccess(true);
    }

    public static void setScreenshotOnThrowable(boolean takeShot) {
        extension.setScreenshotOnThrowable(takeShot);
    }

    public static ScreenshotTaker getScreenshotTaker() {
        return screenshotTaker;
    }
}

p. 
To install this example extension factory:

bc..      System.setProperty("concordion.extensions", "carbon.ScreenshotExtensionFactory");

p. 
 
h4. Using as a command
 
To explicitly include a screenshot in your output, add an attribute named @screenshot@ using the namespace
@"http://210.co.nz/2010/concordion"@ to your Concordion HTML. For example:
 
bc.. <html xmlns:concordion="http://www.concordion.org/2007/concordion" xmlns:twoten="http://210.co.nz/2010/concordion">
....
<div twoten:screenshot=""/>
...
  
p. 
By default, the screenshot is embedded in the output HTML. If you'd rather have it linked, set the attribute value to @linked@, for example:

bc.. <p>See <span twoten:screenshot="linked" style="text-decoration: underline;">this screen</span></p>

h4. The Screenshot Taker

By default, the screenshot will be of the full visible screen.  This can be overridden using a custom @ScreenshotTaker@.  For example, the @SeleniumScreenshotTaker@ in the above examples ensures that only the browser window is captured, that the full browser page is captured and that it is captured regardless of whether the browser window is currently displayed.

h4. Acknowledgements

This extension was partly inspired by Mark Derricutt's ScreenshotCommand:http://github.com/talios/concordion-examples/blob/master/src/test/java/com/talios/ScreenshotCommand.java, and by Adam Setch's post:http://tech.groups.yahoo.com/group/concordion/message/618 to the Concordion list. The default RobotScreenshotTaker was derived from Mark's code.

h2. TimestampFormatterExtension

A simple extension that reformats the milliseconds in the footer of the Concordion output to show hours, minutes and seconds. 

This extension is installed by setting the @concordion.extensions@ system property to @nz.co.twoten.concordion.TimestampFormatterExtension@.
